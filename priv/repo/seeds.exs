# Script for populating the database. You can run it as:
#
#     mix run priv/repo/seeds.exs
#
# Inside the script, you can read and write to any of your
# repositories directly:
#
#     Trackster.Repo.insert!(%Trackster.SomeSchema{})
#
# We recommend using the bang functions (`insert!`, `update!`
# and so on) as they will fail if something goes wrong.
# Trackster.Repo.insert!(%Trackster.SomeSchema{})

# Create 100 private keys to use
case Trackster.Accounts.list_private_keys() do
  [] ->
    Trackster.Accounts.PrivateKey.create_keys()

  _ ->
    nil
end

# Create all city state addresses of UAE
case Trackster.Orders.list_addresses() do
  [] ->
    Trackster.Orders.Address.create_addresses_for_state_and_cities()

  _ ->
    nil
end

last_names = [
  "Medina",
  "Ali",
  "Shah",
  "Ahmed",
  "Mays",
  "Farris",
  "Mohamed",
  "Maher",
  "Hassan",
  "Ferris",
  "Mena",
  "Lima",
  "Muhammad",
  "Ahmad",
  "Ibrahim",
  "Mohammed",
  "Malik",
  "Lamar",
  "Amin",
  "Haddad",
  "Islam",
  "Rand",
  "Aldana",
  "Osman",
  "Saleh",
  "Hasan",
  "Bader",
  "Smail",
  "Meraz",
  "Siddiqui",
  "Salem",
  "Abdullah",
  "Omar",
  "Abdi",
  "Raya",
  "Hussein",
  "Rana",
  "Hannan",
  "Khalil",
  "Aziz",
  "Farah",
  "Rashid",
  "Reza",
  "Mansour",
  "Ream",
  "Roa",
  "Massa",
  "Hossain",
  "Mustafa",
  "Khoury",
  "Karim",
  "Dana",
  "Mohammad",
  "Matta",
  "Said",
  "Saad",
  "Awad",
  "Faris",
  "Hash",
  "Mahmood",
  "Reel",
  "Zak",
  "Abbas",
  "Hyder",
  "Navas",
  "Habib",
  "Saiz",
  "Omara",
  "Malek",
  "Ansari",
  "Sain",
  "Nasser",
  "Tarin",
  "Deen",
  "Lail",
  "Isham",
  "Yousif",
  "Abdallah",
  "Almodovar",
  "Haider",
  "Almanzar",
  "Issa",
  "Hazard",
  "Yusuf",
  "Zuber",
  "Lema",
  "Sharif",
  "Saba",
  "Youssef",
  "Zaman",
  "Oday",
  "Saeed",
  "Nauman",
  "Shaheen",
  "Manna",
  "Noon",
  "Hamid",
  "Absher",
  "Karam",
  "Raza"
]

first_names = [
  "Omar",
  "Dana",
  "Malik",
  "Jude",
  "Amir",
  "Lamar",
  "Jamal",
  "Emil",
  "Ali",
  "Khalil",
  "Ahmad",
  "Mohamed",
  "Muhammad",
  "Kareem",
  "Rashad",
  "Ahmed",
  "Mohammad",
  "Nasir",
  "Ibrahim",
  "Mohammed",
  "Jamel",
  "Hassan",
  "Zaiden",
  "Danial",
  "Samir",
  "Yusuf",
  "Hamza",
  "Jamaal",
  "Abdullah",
  "Raheem",
  "Zain",
  "Zayn",
  "Khalid",
  "Jamil",
  "Jamir",
  "Rayan",
  "Ayaan",
  "Akeem",
  "Tariq",
  "Mustafa",
  "Zaid",
  "Yousef",
  "Karim",
  "Hakeem",
  "Shaquille",
  "Ameer",
  "Cairo",
  "Kairo",
  "Taj",
  "Bilal",
  "Mikael",
  "Kadin",
  "Hasan",
  "Rasheed",
  "Sami",
  "Jaleel",
  "Amar",
  "Tarik",
  "Kahlil",
  "Imran",
  "Zahir",
  "Mohamad",
  "Zayd",
  "Rashaad",
  "Yahya",
  "Mikal",
  "Youssef",
  "Rami",
  "Jad",
  "Sameer",
  "Jory",
  "Nazir",
  "Rashaun",
  "Osman",
  "Amin",
  "Armaan",
  "Hussein",
  "Salem",
  "Farris",
  "Jameel",
  "Ahmir",
  "Ayan",
  "Rand",
  "Kamal",
  "Jalil",
  "Said",
  "Faris",
  "Laith",
  "Kabir",
  "Ferris",
  "Najee",
  "Sharif",
  "Anwar",
  "Ammar",
  "Malek",
  "Kadeem",
  "Yasir",
  "Abdulrahman",
  "Rayyan",
  "Umar"
]

phone_numbers = [
  "+971-505553797",
  "+971-525551160",
  "+971-525555483",
  "+971-565557573",
  "+971-505552213",
  "+971-585555706",
  "+971-505559600",
  "+971-585555114",
  "+971-555551939",
  "+971-505557470",
  "+971-585550070",
  "+971-505559572",
  "+971-545555480",
  "+971-525554871",
  "+971-585558602",
  "+971-585550880",
  "+971-505553909",
  "+971-585554090",
  "+971-585559875",
  "+971-505556643",
  "+971-585550907",
  "+971-585554325",
  "+971-525557340",
  "+971-585551112",
  "+971-585556463",
  "+971-505553341",
  "+971-565555552",
  "+971-555551349",
  "+971-505551198",
  "+971-545550416",
  "+971-505558283",
  "+971-545551336",
  "+971-545555634",
  "+971-505555192",
  "+971-585551015",
  "+971-585553922",
  "+971-505559665",
  "+971-525556213",
  "+971-525557350",
  "+971-505555115",
  "+971-585555675",
  "+971-555551635",
  "+971-505555208",
  "+971-525551480",
  "+971-585551720",
  "+971-585558808",
  "+971-505554910",
  "+971-565559317",
  "+971-585554900",
  "+971-505554949",
  "+971-525550320",
  "+971-585556566",
  "+971-505554940",
  "+971-525554406",
  "+971-565558983",
  "+971-505559684",
  "+971-585552868",
  "+971-585557253",
  "+971-505558585",
  "+971-585551760",
  "+971-585557406",
  "+971-525559720",
  "+971-585559800",
  "+971-525553212",
  "+971-525553589",
  "+971-585555774",
  "+971-555550440",
  "+971-545559601",
  "+971-565557776",
  "+971-505550603",
  "+971-505554049",
  "+971-565558277",
  "+971-585553857",
  "+971-505553952",
  "+971-525551384",
  "+971-525550368",
  "+971-585554667",
  "+971-565555303",
  "+971-525556854",
  "+971-555559312",
  "+971-545554329",
  "+971-545557198",
  "+971-525550858",
  "+971-525557674",
  "+971-585556994",
  "+971-585557718",
  "+971-585558614",
  "+971-585558648",
  "+971-585550463",
  "+971-585558202",
  "+971-585554546",
  "+971-585558228",
  "+971-565556112",
  "+971-505554180",
  "+971-555558201",
  "+971-565554088",
  "+971-585556128",
  "+971-525559263",
  "+971-545555967",
  "+971-585550994",
  "+971-505558894",
  "+971-585553321",
  "+971-505552694",
  "+971-545552185",
  "+971-585558472",
  "+971-525550225",
  "+971-525556261",
  "+971-585554095",
  "+971-525552238",
  "+971-525558453",
  "+971-525551978",
  "+971-525553205",
  "+971-565559268",
  "+971-525558355",
  "+971-585558603",
  "+971-585557092",
  "+971-525550199",
  "+971-565555167",
  "+971-505558474",
  "+971-565557194",
  "+971-585551030",
  "+971-525556352",
  "+971-555558559",
  "+971-505550975",
  "+971-555550871",
  "+971-525557086",
  "+971-505552333",
  "+971-505557517",
  "+971-525552610",
  "+971-555550013",
  "+971-525554154",
  "+971-505553360",
  "+971-555551353",
  "+971-545555595",
  "+971-525554544",
  "+971-525550364",
  "+971-525554319",
  "+971-585556085",
  "+971-525553522",
  "+971-505550199",
  "+971-505559376",
  "+971-525555477",
  "+971-505552617",
  "+971-565553854",
  "+971-555556698",
  "+971-585550956",
  "+971-585557747",
  "+971-585554802",
  "+971-545553765",
  "+971-585553713",
  "+971-505558168",
  "+971-585552685",
  "+971-525552359",
  "+971-585558772",
  "+971-585559878",
  "+971-585555222",
  "+971-545556681",
  "+971-565550525",
  "+971-505556915",
  "+971-545555968",
  "+971-505553088",
  "+971-525552766",
  "+971-585552174",
  "+971-565558286",
  "+971-505551912",
  "+971-555555735",
  "+971-585556503",
  "+971-585554206",
  "+971-505559814",
  "+971-565558811",
  "+971-555553918",
  "+971-505559928",
  "+971-545557210",
  "+971-505557419",
  "+971-505557983",
  "+971-565551818",
  "+971-505552492",
  "+971-585551728",
  "+971-555559520",
  "+971-545555046",
  "+971-505556237",
  "+971-585554481",
  "+971-525556830",
  "+971-505553059",
  "+971-555552263",
  "+971-505552985",
  "+971-525555486",
  "+971-525555179",
  "+971-505555403",
  "+971-585559781",
  "+971-525554220",
  "+971-585550619",
  "+971-585557724",
  "+971-505557495",
  "+971-525554854",
  "+971-505558550",
  "+971-505558400",
  "+971-525556002",
  "+971-505557680",
  "+971-555552592"
]

case Trackster.Orders.list_couriers() do
  [] ->
    # Randomly shuffle the first and last names
    shuffled_first_names = Enum.shuffle(first_names)
    shuffled_last_names = Enum.shuffle(last_names)

    # Combine first and last names to create full names
    names_and_numbers =
      for _ <- 1..200 do
        first_name = Enum.random(shuffled_first_names)
        last_name = Enum.random(shuffled_last_names)
        "#{first_name} #{last_name}"
      end
      |> Enum.uniq()
      |> Enum.zip(phone_numbers)
      |> Enum.chunk_every(5, 5, :discard)
      |> IO.inspect(label: "Sublists of unique full names")

    addresses =
      Trackster.Orders.list_addresses()
      |> Enum.zip(names_and_numbers)
      |> Enum.flat_map(fn {address, name_and_number} ->
        Enum.map(name_and_number, fn {name, number} ->
          %Trackster.Orders.Courier{
            address_id: address.id,
            name: name,
            phone: number
          }
          |> Trackster.Repo.insert!()
          |> IO.inspect(label: "courier created")
        end)
      end)

  _ ->
    nil
end
